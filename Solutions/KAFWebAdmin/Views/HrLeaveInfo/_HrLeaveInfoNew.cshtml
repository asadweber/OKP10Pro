@model KAF.BusinessDataObjects.hr_leaveinfoEntity

<style>
    .form-horizontal .form-group {
        margin-right: 10px;
        margin-left: 10px;
    }
</style>

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "Post", OnSuccess = "", LoadingElementId = "divProgressBar" }, new { @id = "frmHr_LeaveInfoNew", @class = "form-horizontal" }))
{
    HtmlHelper.UnobtrusiveJavaScriptEnabled = true;
    HtmlHelper.ClientValidationEnabled = true;
    @Html.AntiForgeryToken()

    <div class="panel panel-primary list-panel" id="list-panel">
        <div class="panel-heading list-panel-heading">
            @KAF.MsgContainer._hr_leaveinfo.leaveinfoCreate
        </div>

        <div class="panel-body">
            <div class="modal-body">
                <div class="form-horizontal container">
                    <div class="row">
                        @Html.HiddenFor(m => m.leaveinfoid)
                        @Html.HiddenFor(m => m.hrbasicid)
                    </div>

                    <div class="row ">

                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.leavetypeid, htmlAttributes: new { @class = "labelNormal required " })
                                @{Html.RenderAction("LoadLeaveTypeSearch", "Common", new { area = "", selectid = "leavetypeid", minimumInputLength = 0, delay = 250, preloaded = ViewBag.preHr_NewDemandLetterNo, multiple = false, isReadOnly = false, IsRequired = true, isActive = 1 });}

                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.Label("Balance", htmlAttributes: new { @class = "labelNormal required " })
                                @Html.Editor("txtbalance", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.startdate, htmlAttributes: new { @class = "labelNormal  required " })
                                <div class='input-group date ' id='fromdateapprx' style="width: 100 %; ">
                                    @Html.EditorFor(model => model.startdate, new { htmlAttributes = new { @Value = Model.startdate != null ? Convert.ToDateTime(Model.startdate).ToString("dd-MM-yyyy") : null, @class = "form-control", @type = "text" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.startdate, "", new { @class = "text-danger " })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.enddate, htmlAttributes: new { @class = "labelNormal  required " })
                                <div class='input-group date ' id='todateapprx' style="width: 100 %; ">
                                    @Html.EditorFor(model => model.enddate, new { htmlAttributes = new { @Value = Model.enddate != null ? Convert.ToDateTime(Model.enddate).ToString("dd-MM-yyyy") : null, @class = "form-control", @type = "text" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.enddate, "", new { @class = "text-danger " })
                            </div>
                        </div>
                    </div>
                    <div class="row ">

                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.leavestartdate, htmlAttributes: new { @class = "labelNormal  required " })
                                <div class='input-group date ' id='fromdateactual' style="width: 100 %; ">
                                    @Html.EditorFor(model => model.leavestartdate, new { htmlAttributes = new { @Value = Model.leavestartdate != null ? Convert.ToDateTime(Model.leavestartdate).ToString("dd-MM-yyyy") : null, @class = "form-control", @type = "text" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.leavestartdate, "", new { @class = "text-danger " })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.leaveenddate, htmlAttributes: new { @class = "labelNormal  required " })
                                <div class='input-group date ' id='todateactual' style="width: 100 %; ">
                                    @Html.EditorFor(model => model.leaveenddate, new { htmlAttributes = new { @Value = Model.leaveenddate != null ? Convert.ToDateTime(Model.leaveenddate).ToString("dd-MM-yyyy") : null, @class = "form-control", @type = "text" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.leaveenddate, "", new { @class = "text-danger " })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.leavedays, htmlAttributes: new { @class = "labelNormal  required " })
                                @Html.Editor("txtleavedays", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                    </div>

                    <div class="row ">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.letterno, htmlAttributes: new { @class = "labelNormal  " })
                                @Html.EditorFor(model => model.letterno, new { htmlAttributes = new { @class = " form-control" } })
                                @Html.ValidationMessageFor(model => model.letterno, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.letterdate, htmlAttributes: new { @class = "labelNormal   " })
                                <div class='input-group date dateonly' id='' style="width: 100 %; ">
                                    @Html.EditorFor(model => model.letterdate, new { htmlAttributes = new { @Value = Model.letterdate != null ? Convert.ToDateTime(Model.letterdate).ToString("dd-MM-yyyy") : null, @class = "form-control", @type = "text" } })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.letterdate, "", new { @class = "text-danger " })
                            </div>
                        </div>
                    </div>
                    <div class="row ">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.withgovtticket, htmlAttributes: new { @class = "labelNormal required " })
                                @Html.EditorFor(model => model.withgovtticket, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.withgovtticket, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>

                    <div class="row ">

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.remarks, htmlAttributes: new { @class = "labelNormal  " })
                                @Html.EditorFor(model => model.remarks, new { htmlAttributes = new { @class = " form-control" } })
                                @Html.ValidationMessageFor(model => model.remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="btn-toolbar">
                        <button type="submit" id="btnSaveHrLeaveInfo" class="btn btn-primary btn-md btnSaveHrLeaveInfo"><i class="fa fa-save"> </i> @KAF.MsgContainer._Common._btnSave</button>
                        <button type="submit" id="btnModalCloseNew" class="btn btn-danger btn-md cancel"><i class="fa fa-arrow-circle-left"> </i> @KAF.MsgContainer._Common._btnCancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<script>
    //filecontrol addons
    var LastLeaveEndDate = '@Model.ex_date1.Value';
    function CalcActualDays(date1, date2) {
        if (date1 != null && date2 != null) {
            var Difference_In_Time = new Date(date2).getTime() - new Date(date1).getTime();

            // To calculate the no. of days between two dates
            var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);

            $("#txtleavedays").val(Difference_In_Days+1);
        }
    }
    $(document).ready(function () {
        //initializedatetimepicker();
      
        $("#leavetypeid").change(function () {

            try {
                AddAntiForgeryToken = function (data) {
                    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
                    return data;
                };
                var input = AddAntiForgeryToken({
                    token: $(".txtUserSTK").val(),
                    userinfo: $(".txtServerUtilObj").val(),
                    useripaddress: $(".txtuserip").val(),
                    sessionid: $(".txtUserSes").val(),
                    methodname: "HrLeaveInfoNew",
                    currenturl: window.location.href,

                    HRBasicID: $("#hrbasicid").val(),
                    LeaveTypeID: $("#leavetypeid").val(),

                });

                $.ajax({
                    url: baseurl + "HrLeaveInfo/GetLeaveBalance",
                    type: 'POST',
                    data: input,
                    success: function (response) {
                        $("#txtbalance").val(response.data[0].TotalBalance);
                    }
                });

            } catch (e) {
                $.alert({
                    title: _getCookieForLanguage("_informationTitle"),
                    content: e.message,
                    type: 'red'
                });
            }

        });

        $j('#fromdateactual').datetimepicker(
            {
                format: 'DD-MM-YYYY'
            });


        $j('#todateactual').datetimepicker(
            {
                useCurrent: false,
                format: 'DD-MM-YYYY'
            });

        $j("#fromdateactual").on("dp.change", function (e) {
            if ($j("#leavestartdate").val().length > 0) {
                var result = new Date(e.date);
                result.setHours(0, 0, 0, 0);
                $j('#todateactual').data("DateTimePicker").minDate(result);

                if ($("#txtbalance").val().length > 0) {
                  
                    result.setDate(result.getDate() + parseInt($("#txtbalance").val())-1);
                   // var maxdate = result.getDate() + parseInt($("#txtbalance").val());
                    $j('#todateactual').data("DateTimePicker").maxDate(result);

                }
                
                CalcActualDays(GetDateFromTextBox($j("#leavestartdate").val()), GetDateFromTextBox($j("#leaveenddate").val()));
            }
        });
        $j("#todateactual").on("dp.change", function (e) {
            if ($j("#leaveenddate").val().length > 0) {
                var result = new Date(e.date);
                result.setHours(0, 0, 0, 0);
                $j('#fromdateactual').data("DateTimePicker").maxDate(result);
                CalcActualDays(GetDateFromTextBox($j("#leavestartdate").val()), GetDateFromTextBox($j("#leaveenddate").val()));
            }
        });

       

        $j('#fromdateapprx').datetimepicker(
            {
                format: 'DD-MM-YYYY'
            });

        $j('.dateonly').datetimepicker(
            {
                format: 'DD-MM-YYYY'
            });


        $j('#todateapprx').datetimepicker(
            {
                useCurrent: false,
                format: 'DD-MM-YYYY'
            });

        $j("#fromdateapprx").on("dp.change", function (e) {
            if ($j("#startdate").val().length > 0) {
                var result = new Date(e.date);
                result.setHours(0, 0, 0, 0);
                $j('#fromdateactual').data("DateTimePicker").minDate(result);

                if ($("#txtbalance").val().length > 0) {
                    result.setDate(result.getDate() + parseInt($("#txtbalance").val()) +17);
                    $j('#todateapprx').data("DateTimePicker").maxDate(result);

                }

            }
        });
        $j("#todateapprx").on("dp.change", function (e) {
            //if ($j("#enddate").val().length > 0) {
            //    var result = new Date(e.date);
            //    result.setHours(0, 0, 0, 0);
            //    $j('#fromdateactual').data("DateTimePicker").maxDate(result);
                
            //}
        });
        if (LastLeaveEndDate != '') {
            $j("#fromdateactual").data("DateTimePicker").minDate(LastLeaveEndDate);
            $j("#fromdateapprx").data("DateTimePicker").minDate(LastLeaveEndDate);
        }

    });




</script>




